(1st Practical.....)

>docker run hello-world
>docker run --name myweb -p 7089:80 -d nginx
>docker run --name mycentos -d centos
>docker ps -a
>docker history nginx
>docker top containerid
>docker stop containerid
>docker start containerid
>docker rm containerid
>docker pause containerid
>docker unpause containerid
>docker kill containerid

copy public-id and paste it with :7089



(2nd Practical.....)

>sudo nano Dockerfile

   FROM ubuntu
MAINTAINER 20210801112@dypiu.ac.in
RUN apt-get update
RUN apt-get install nginx -y
CMD ["echo","Image created"]

>docker build -t harsh:latest .
>docker login
>docker images
>docker tag imageid namesapce/reponame
>docker push namesapce/reponame
>docker rmi -f imageid
>docker pull namesapce/reponame
>docker images



(3rd Practical.....)

>docker pull jenkins/jenkins:lts
>docker run -p 8080:8080 -p 50000:50000 jenkins/jenkins
  copy password and save it
copy public ip and paste it with :8080
paste password 
skip and continue 
save and finish

copy public ip and paste it with :50000



(4th Practical....)

>docker pull registry:latest 
>docker run -d -p 5000:5000 --name registry registry:latest
>docker images
>docker ps -a
>docker pull centos
>docker images
>docker tag imageid localhost:5000/centos
>docker push localhost:5000/centos
>docker images
>docker rmi -f imageid 
>docker pull localhost:5000/centos
>docker images

(5th) 
httpd 
httpd:2.4
httpd-80-tcp
httpd 

(6th Practical.....)

>curl -SL https://github.com/docker/compose/releases/download/v2.24.6/docker-compose-linux-x86_64 -o /usr/local/bin/docker-compose
>chmod +x /usr/local/bin/docker-compose
>docker compose version
>mkdir composetest
>cd composetest
>nano app.py
import time
import redis
from flask import Flask
app = Flask(__name__)
cache = redis.Redis(host='redis', port=6379)
def get_hit_count():
    retries = 5
    while True:
        try:
            return cache.incr('hits')
        except redis.exceptions.ConnectionError as exc:
            if retries == 0:
                raise exc
            retries -= 1
            time.sleep(0.5)
@app.route('/')
def hello():
    count = get_hit_count()
    return 'Hello World! I have been seen {} times.\n'.format(count)

>nano requirements.txt
flask
redis
>nano Dockerfile
# syntax=docker/dockerfile:1
FROM python:3.10-alpine
WORKDIR /code
ENV FLASK_APP=app.py
ENV FLASK_RUN_HOST=0.0.0.0
RUN apk add --no-cache gcc musl-dev linux-headers
COPY requirements.txt requirements.txt
RUN pip install -r requirements.txt
EXPOSE 5000
COPY . .
CMD ["flask", "run"]

>nano compose.yml
services:
  web:
    build: .
    ports:
      - "8000:5000"
  redis:
    image: "redis:alpine"
>docker compose up
publicip:8000


>docker compose down 

(7th Practical......)
.
.
.
.
.
.
.
.
.
.
.



(8th Practical......)

>docker swarm init
>docker swarm join-token worker
copy and paste in both the worker node
>mkdir demoproject
>cd demoproject
>nano app.py 
from flask import Flask
from redis import Redis, RedisError
import os
import socket
# Connect to Redis
redis = Redis(host="redis", db=0, socket_connect_timeout=2, socket_timeout=2)
app = Flask(__name__)
@app.route("/")
def hello():
    try:
        visits = redis.incr("counter")
    except RedisError:
        visits = "<i>cannot connect to Redis, counter disabled</i>"

    html = "<h3>Hello {name}!</h3>" \
           "<b>Hostname:</b> {hostname}<br/>" \
           "<b>Visits:</b> {visits}"
    return html.format(name=os.getenv("NAME", "world"), hostname=socket.gethostname(), visits=visits)
if __name__ == "__main__":
    app.run(host='0.0.0.0', port=80)
>nano docker-compose.yml 
version: "3"
services:
  # Service Name Defined as web
  web:
    # Pull the Image from Repository.
    # replace username/repo:tag with your name and image details
    #image: username/repo:tag 
    image: thundero1/stack
    # Command used to deploy the Service
    deploy:
      # Run 5 instances of that image as a service called web
      replicas: 5
      resources:
        # Limiting each one to use, at most, 10% of a single core of CPU time and 50MB of RAM.
        limits:
          cpus: "0.1"
          memory: 50M
      # Immediately restart containers if one fails.     
      restart_policy:
        condition: on-failure
    # Map port 4000 on the host to webâ€™s port 80.    
    ports:
      - "4000:80"
    # Define default network  
    networks:
      - webnet
networks:
  webnet:


>nano Dockerfile 
# Use an official Python runtime as a parent image
FROM python:3.12-slim
# Set the working directory to /app
WORKDIR /app
# Copy the current directory contents into the container at /app
COPY . /app
# Install any needed packages specified in requirements.txt
RUN pip install --trusted-host pypi.python.org -r requirements.txt
# Make port 80 available to the world outside this container
EXPOSE 80
# Define environment variable
ENV NAME World
# Run app.py when the container launches
CMD ["python", "app.py"]


>nano requirements.txt 
Flask
Redis


(9th Practical......)

>mkdir healthcheck
>cd healthcheck
>docker ps -a
>docker container run --name postgres1 -d postgres
>docker ps -a
>docker container run --name pg4 -e POSTGRES_PASSWORD=mypassword -d postgres
>docker ps -a
>docker container exec -it pg4 bash
>pg_isready -U postgres
>exit
>docker container run -d --name p5 -e POSTGRES_PASSWORD=mypassword --health-cmd="pg_isready -U postgres || exit" -d postgres
>docker ps -a
(go to the root user)
>docker container run -d --name pg7 -e POSTGRES_PASSWORD=mypassword --health-cmd="pg_isready -U root || exit" postgres
>docker ps













